package com.core.hello;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;
class Main{
    static int n,m;
    static int[][] arr;
    static int[][] ans;
    static int[] dx = {-1,0,1,0};
    static int[] dy = {0,1,0,-1};
    static int MIN = Integer.MAX_VALUE;
    static boolean[][] visit;
    static Queue<Node> queue = new LinkedList<>();
    public static void main(String[]args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());
        n = Integer.parseInt(st.nextToken());
        m = Integer.parseInt(st.nextToken());
        arr = new int[n][m];
        ans = new int[n][m];
        visit = new boolean[n][m];
        for(int i = 0; i < n; i++){
            st = new StringTokenizer(br.readLine());
            for(int j = 0; j < m; j++) {
                arr[i][j] = Integer.parseInt(st.nextToken());
            }
        }

        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(arr[i][j] == 1)
                    ans[i][j] = bfs(i,j);
                else if(arr[i][j] == 0)
                    ans[i][j] = 0;
            }
        }
        for(int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                System.out.print(ans[i][j] + " ");
            }
            System.out.println();
        }
    }
    static int bfs(int x, int y){
        MIN = Integer.MAX_VALUE;
        queue = new LinkedList<>();
        queue.offer(new Node(x,y,0));
        visit = new boolean[n][m];
        visit[x][y] = true;
        while(!queue.isEmpty()){
            Node now = queue.poll();
            if(arr[now.x][now.y] == 2){
                MIN = Math.min(MIN, now.d);
                return MIN;
            }
            int nx,ny;
            for(int i = 0; i < 4; i++){
                nx = now.x + dx[i];
                ny = now.y + dy[i];
                if(nx < 0 || ny < 0 || nx >= n || ny >= m)
                    continue;
                if(visit[nx][ny])
                    continue;
                if(arr[nx][ny] == 0)
                    continue;
                queue.offer(new Node(nx,ny,now.d + 1));
                visit[nx][ny] = true;
            }
        }
        return -1;
    }
}
class Node{
    int x;
    int y;
    int d;
    Node(int x, int y, int d){
        this.x = x;
        this.y = y;
        this.d = d;
    }
}
