    import java.util.*;

    public class Main {
    static int n;
    static int[][] arr;
    static int[][] t;
    static int[] ans;
    static ArrayList<Integer>[] list;
    static int count = 0;
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        n = scan.nextInt();
        arr = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                arr[i][j] = scan.nextInt();
            }
        }
        ans = new int[5];
        list = new ArrayList[n];
        for(int i = 0; i < n; i++){
            list[i] = new ArrayList<>();
        }
        dfs(0);
        System.out.println(count);
    }
    public static void dfs(int cnt){
        if(cnt == 5){
            search();
            return;
        }
        for(int i = 0; i < 4; i++){
            if(ans[cnt] == 0) {
                ans[cnt] = i;
                dfs(cnt + 1);
                ans[cnt] = 0;
            }
        }
    }
    public static void search() {
        t = new int[n][n];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                t[i][j] = arr[i][j];
            }
        }
        for (int i = 0; i < 5; i++) {
            switch (ans[i]) {
                case 0:
                    for (int j = 0; j < n; j++) {
                        for (int k = 0; k < n; k++) {
                            if (t[j][k] != 0) {
                                list[k].add(t[j][k]);
                                t[j][k] = 0;
                            }
                        }
                    }
                    for (int j = 0; j < n; j++) {
                        int r = 0;
                        while (list[j].size() != 0) {
                            if (list[j].size() != 1 && list[j].get(0).equals(list[j].get(1))) {
                                t[r++][j] = list[j].get(0) << 1;
                                list[j].remove(0);
                                list[j].remove(0);
                            } else {
                                t[r++][j] = list[j].get(0);
                                list[j].remove(0);
                            }
                        }
                    }
                    break;
                    case 1:
                    for (int j = n - 1; j >= 0; j--) {
                        for (int k = 0; k < n; k++) {
                            if (t[j][k] != 0) {
                                list[k].add(t[j][k]);
                                t[j][k] = 0;
                            }
                        }
                    }
                    for (int j = 0; j < n; j++) {
                        int r = n - 1;
                        while (list[j].size() != 0) {
                            if (list[j].size() != 1 && list[j].get(0).equals(list[j].get(1))) {
                                t[r--][j] = list[j].get(0) << 1;
                                list[j].remove(0);
                                list[j].remove(0);
                            }else {
                                t[r--][j] = list[j].get(0);
                                 list[j].remove(0);
                            }
                        }
                    }
                    break;
                    case 2:
                        for (int j = 0; j < n; j++) {
                            for (int k = 0; k < n; k++) {
                                if (t[j][k] != 0) {
                                    list[j].add(t[j][k]);
                                    t[j][k] = 0;
                                }
                            }
                        }
                    for (int j = 0; j < n; j++) {
                        int r = 0;
                        while (list[j].size() != 0) {
                            if (list[j].size() != 0) {
                                if (list[j].size() != 1 && list[j].get(0).equals(list[j].get(1))) {
                                    t[j][r++] = list[j].get(0) << 1;
                                    list[j].remove(0);
                                    list[j].remove(0);
                                } else {
                                    t[j][r++] = list[j].get(0);
                                    list[j].remove(0);
                                }
                            }
                        }
                    }
                    break;
                    case 3:
                        for (int j = 0; j < n; j++) {
                            for (int k = n - 1; k >= 0; k--) {
                                if (t[j][k] != 0) {
                                    list[j].add(t[j][k]);
                                    t[j][k] = 0;
                                    }
                                }
                             }
                        for (int j = 0; j < n; j++) {
                            int r = n - 1;
                            while (list[j].size() != 0) {
                                if (list[j].size() != 1 && list[j].get(0).equals(list[j].get(1))) {
                                    t[j][r--] = list[j].get(0) << 1;
                                    list[j].remove(0);
                                    list[j].remove(0);
                                } else {
                                    t[j][r--] = list[j].get(0);
                                    list[j].remove(0);
                                }
                            }
                        }
                        break;
                   }
                }
            int max = 0;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    max = Math.max(max, t[i][j]);
                }
            }
            if (count < max)
                count = max;
        }
    }
