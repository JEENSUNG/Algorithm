import java.util.Arrays;
import java.util.Scanner;

public class Main {
    static int n, m;
    static int[][] arr;
    static int[] place = new int[2];
    static int[] minPlace = new int[2];
    static boolean[] visit;
    static int min = Integer.MAX_VALUE;
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        n = scan.nextInt();
        m = scan.nextInt();
        visit = new boolean[n+1];
        arr = new int[n + 1][n + 1];
        for(int i = 0; i <= n; i++){
            for(int j = 0; j <= n; j++){
                if(i == j)
                    continue;
                arr[i][j] = n;
            }
        }
        for (int i = 0; i < m; i++) {
            int x = scan.nextInt();
            int y = scan.nextInt();
            arr[x][y] = arr[y][x] = 1;
        }
        check();
        dfs(1,0);
        System.out.println(minPlace[0] + " " + minPlace[1] + " " + min);
    }
    static void check(){
        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= n; j++){
                for(int k = 1; k <= n; k++){
                    arr[j][k] = Math.min(arr[j][k], arr[j][i] + arr[i][k]);
                }
            }
        }
    }
    static void dfs(int start, int cnt){
        if(cnt == 2){
            int sum = 0;
            for(int i = 1; i <= n; i++){
                if(!visit[i]){
                    int mmin = Integer.MAX_VALUE;
                    for(int j = 0; j < 2; j++){
                        mmin = Math.min(arr[i][place[j]], mmin);
                    }
                    sum += mmin * 2;
                }
            }
            if(min > sum){
                for(int i = 0; i < 2; i++){
                    minPlace[i] = place[i];
                }
                min = sum;
            }
            return;
        }
        for(int i = start; i <= n; i++){
            if(!visit[i]){
                visit[i] = true;
                place[cnt] = i;
                dfs(i, cnt+1);
                visit[i] = false;
            }
        }
    }
}
