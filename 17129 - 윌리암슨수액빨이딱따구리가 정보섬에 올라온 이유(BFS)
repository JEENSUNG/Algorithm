import java.util.*;
class Main{
    static class Point{
        int x;
        int y;
        int time;
        Point(int x, int y, int time){
            this.x = x;
            this.y = y;
            this.time = time;
        }
    }
    static int n, m;
    static int[][] dir = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
    static int[][] arr;
    static int min = Integer.MAX_VALUE;
    static boolean[][] visit;
    static Queue<Point> queue = new LinkedList<>();
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        n = scan.nextInt();
        m = scan.nextInt();
        arr = new int[n][m];
        visit = new boolean[n][m];
        for(int i = 0; i < n; i++) {
            String str = scan.next();
            for (int j = 0; j < m; j++) {
                arr[i][j] = str.charAt(j) - '0';
                if (arr[i][j] == 2) {
                    queue.offer(new Point(i, j, 0));
                    visit[i][j] = true;
                }
            }
        }
        bfs();
        if(min == Integer.MAX_VALUE)
            System.out.println("NIE");
        else {
            System.out.println("TAK");
            System.out.println(min);
        }
    }
    static void bfs(){
        while (!queue.isEmpty()) {
            Point now = queue.poll();
            if(arr[now.x][now.y] == 3 || arr[now.x][now.y] == 4 || arr[now.x][now.y] == 5){
                min = now.time;
                break;
            }
            for(int i = 0; i < 4; i++){
                int nx = now.x + dir[i][0];
                int ny = now.y + dir[i][1];
                if(nx < 0 || ny < 0 || nx >= n || ny >= m)
                    continue;
                if(visit[nx][ny])
                    continue;
                if(arr[nx][ny] == 1)
                    continue;
                queue.offer(new Point(nx, ny, now.time + 1));
                visit[nx][ny] = true;
            }
        }
    }
}
