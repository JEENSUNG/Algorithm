import java.util.ArrayList;

class Point{
    int x;
    int y;
    Point(int x, int y){
        this.x = x;
        this.y = y;
    }
}
class Solution {
    static boolean[] visit;
    static int[][] dir = {{1,-1}, {-1,1}, {1, 1}, {-1, -1}};
    static int[][] arr;
    static int answer;
    static int m;
    static ArrayList<Point> list;
    public int solution(int n) {
        m = n;
        answer = 0;
        arr = new int[n][n];
        visit = new boolean[n];
        for(int i = 0; i < n; i++){
            list = new ArrayList<>();
            list.add(new Point(0, i));
            arr[0][i] = 1;
            visit[i] = true;
            dfs(1);
            visit[i] = false;
            arr[0][i] = 0;
        }
        return answer;
    }
    static void dfs(int count){
        if(count == m){
            answer++;
            return;
        }
        for(int i = 0; i < m; i++){
            if(!visit[i]){
                arr[count][i] = 1;
                list.add(new Point(count, i));
                if(check()) {
                    visit[i] = true;
                    dfs(count + 1);
                    visit[i] = false;
                }
                list.remove(list.size() - 1);
                arr[count][i] = 0;
            }
        }
    }
    static boolean check(){
        for(int i = 0; i < list.size(); i++){
            Point now = list.get(i);
            int nx = now.x;
            int ny = now.y;
            for(int j = i; j < list.size(); j++){
                Point now2 = list.get(j);
                int Nx = now2.x;
                int Ny = now2.y;
                if(Math.abs(Nx - nx) == Math.abs(Ny - ny) && Nx - nx != 0)
                    return false;
            }
        }
        return true;
    }
}
