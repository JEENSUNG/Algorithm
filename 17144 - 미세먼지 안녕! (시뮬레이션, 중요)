package com.core.hello;
import java.util.*;
class Point{
    int x;
    int y;
    Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
class Main{
    static int n, m, t;
    static int[][] dir = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
    static int[][] arr;
    static int[][] ans;
    static boolean[][] visit;
    static Queue<Point> queue = new LinkedList<>();
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        n = scan.nextInt();
        m = scan.nextInt();
        t = scan.nextInt();
        arr = new int[n][m];
        ans = new int[n][m];
        visit = new boolean[n][m];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                arr[i][j] = scan.nextInt();
                if(arr[i][j] == -1)
                    queue.offer(new Point(i, j));
            }
        }
        while(t--> 0){
            move();
            clean();
        }
        int answer = 0;
        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++)
                if(arr[i][j] > 0)
                    answer += arr[i][j];
        System.out.println(answer);
    }
    static void move(){
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(arr[i][j] > 0){
                    check(i,j);
                }
            }
        }
        for(int i = 0; i < n; i++)
            for(int j = 0; j < m; j++)
                if(arr[i][j] > 0)
                    arr[i][j] += ans[i][j];
    }
    static void check(int x, int y){
        int count = 0;
        for(int i = 0; i < 4; i++){
            int nx = x + dir[i][0];
            int ny = y + dir[i][1];
            if(nx < 0 || ny < 0 || nx >= n || ny >= m)
                continue;
            if(arr[nx][ny] == -1)
                continue;
            count++;
            ans[nx][ny] += arr[x][y] / 5;
        }
        arr[x][y] -= (arr[x][y] / 5) * count;
    }
    static void clean(){
        Point now = queue.poll();
        for(int i = now.x - 1; i > 0; i--)
            arr[i][0] = arr[i - 1][0];
        for(int i = 0; i < m - 1; i++)
            arr[0][i] = arr[0][i + 1];
        for(int i = 0; i < now.x - 1; i++)
            arr[i][m - 1] = arr[i + 1][m - 1];
        for(int i = m - 1; i > 1; i--)
            arr[now.x][i] = arr[now.x][i - 1];

        Point now2 = queue.poll();
        for (int i = now2.x + 1; i < n - 1; i++)
            arr[i][0] = arr[i + 1][0];
        for (int i = 0; i < m - 1; i++)
            arr[n - 1][i] = arr[n - 1][i + 1];
        for(int i = n - 1; i > now2.x + 1; i--)
            arr[i][m - 1] = arr[i - 1][m - 1];
        for(int i = m - 1; i > 1; i--)
            arr[now2.x][i] = arr[now2.x][i - 1];
        queue.offer(new Point(now.x, now.y));
        queue.offer(new Point(now2.x, now2.y));
    }
}
