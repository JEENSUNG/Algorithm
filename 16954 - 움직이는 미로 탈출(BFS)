import java.util.*;
class Point{
    int x;
    int y;
    Point(int x, int y){
        this.x = x;
        this.y = y;
    }
}
class Main{
    static int[][] arr = new int[8][8];
    static boolean isOk = false;
    static int dir[][] = {{-1,0}, {-1,1}, {0,1}, {0,0},{1,1}, {1,0}, {1,-1}, {0,-1}, {-1,-1}};
    static Queue<Point> queue = new LinkedList<>();
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        for(int i = 0; i < 8; i++){
            String str = scan.next();
            for(int j = 0; j < 8; j++){
                if(str.charAt(j) == '.')
                    arr[i][j] = 0;
                else
                    arr[i][j] = 1;
            }
        }
        queue.offer(new Point(7,0));
        while(!queue.isEmpty() && !isOk){
            bfs();
            move();
        }
        if(isOk)
            System.out.println(1);
        else
            System.out.println(0);
    }
    static void bfs(){
        int size = queue.size();
        for(int k = 0; k < size; k++){
            if(isOk)
                return;
            Point now = queue.poll();
            if(arr[now.x][now.y] == 1)
                continue;
            if(now.x == 0 && now.y == 7) {
                isOk = true;
                return;
            }
            for(int i = 0; i < 9; i++){
                int nx = now.x + dir[i][0];
                int ny = now.y + dir[i][1];
                if(nx < 0 || ny < 0 || nx >= 8 || ny >= 8)
                    continue;
                if(arr[nx][ny] == 1)
                    continue;
                queue.offer(new Point(nx,ny));
            }
        }
    }
    static void move(){
        for(int i = 6; i >= 0; i--){
            for(int j = 0; j < 8; j++){
                if(arr[i][j] == 1){
                    arr[i + 1][j] = 1;
                    arr[i][j] = 0;
                }
            }
        }
    }
}
