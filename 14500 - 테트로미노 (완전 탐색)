import java.util.*;

public class Main {
    static int n,m;
    static int[][] arr;
    static int[] dx = {-1,0,0,1};
    static int[] dy = {0,1,-1,0};
    static boolean[][] visit = new boolean[n][m];
    static int count;
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        n = scan.nextInt();
        m = scan.nextInt();
        arr = new int[n][m];
        visit = new boolean[n][m];
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                arr[i][j] = scan.nextInt();
            }
        }
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                dfs(i,j,0,0);
                check(i,j);
            }
        }
        System.out.println(count);
    }
    static void dfs(int x, int y, int depth, int sum){
        if(depth == 4){
            count = Math.max(count, sum);
            return;
        }
        for(int i = 0; i < 4; i++){
            int nx = x + dx[i];
            int ny = y + dy[i];
            if(nx < 0 || ny < 0 || nx >= n || ny >= m)
                continue;
            if(visit[nx][ny])
                continue;
            visit[nx][ny] = true;
            dfs(nx,ny,depth+1,sum + arr[nx][ny]);
            visit[nx][ny] = false;
        }
    }
    static void check(int x, int y){
        int total = 4;
        int sum = arr[x][y];
        int min = Integer.MAX_VALUE;
        for(int i = 0; i < 4; i++){
            if(total < 3)
                return;
            int nx = x + dx[i];
            int ny = y + dy[i];
            if(nx < 0 || ny < 0 || nx >= n || ny >= m){
                total--;
                continue;
            }
            min = Math.min(min, arr[nx][ny]);
            sum += arr[nx][ny];
        }
        if(total == 4)
            sum = sum - min;
        count = Math.max(sum,count);
    }
}
