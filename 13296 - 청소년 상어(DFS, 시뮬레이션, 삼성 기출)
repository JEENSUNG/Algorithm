import java.util.*;
class Fish{
    int num;
    int x;
    int y;
    int dir;
    int alive;
    Fish(int num, int x, int y, int dir, int alive){
        this.num = num;
        this.x = x;
        this.y = y;
        this.dir = dir;
        this.alive = alive;
    }
}
class Solution{
    static int[][] arr;
    static Fish[] fish;
    static int d[][] = {{-1,0},{-1,-1},{0,-1},{1,-1},{1,0},{1,1},{0,1},{-1,1}};
    static int answer = 0;
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        arr = new int[4][4];
        fish = new Fish[17];
        for(int i = 0; i < 4; i++){
            for(int j = 0; j < 4; j++){
                int x = scan.nextInt();
                int y = scan.nextInt() - 1;
                fish[x] = new Fish(x, i, j, y, 1);
                arr[i][j] = x;
            }
        }
        int nx = 0;
        int ny = 0;
        int nd = fish[arr[0][0]].dir;
        int eat = arr[0][0];
        fish[arr[0][0]].alive = 0;
        arr[0][0] = -1;
        dfs(nx,ny,nd,eat);
        System.out.println(answer);
    }
    static void dfs(int x, int y, int nd, int eat){
        answer = Math.max(answer, eat);
        int[][] tempArr = new int[4][4];
        for(int i = 0; i < 4; i++){
            System.arraycopy(arr[i],0,tempArr[i],0,4);
        }
        Fish[] tempFish = new Fish[17];
        for(int i = 1; i <= 16; i++)
            tempFish[i] = new Fish(fish[i].num,fish[i].x,fish[i].y,fish[i].dir,fish[i].alive);
        moveFish();
        for(int i = 1; i < 4; i++){
            int nx = x + d[nd][0] * i;
            int ny = y + d[nd][1] * i;
            if(nx < 0 || ny < 0 || nx >= 4 | ny >= 4)
                continue;
            if(arr[nx][ny] == 0)
                continue;
            int eatFish = arr[nx][ny];
            int nnd = fish[eatFish].dir;
            arr[x][y] = 0;
            arr[nx][ny] = -1;
            fish[eatFish].alive = 0;

            dfs(nx, ny, nnd, eat + eatFish);

            fish[eatFish].alive = 1;
            arr[x][y] = -1;
            arr[nx][ny] = eatFish;
        }
        for(int i = 0; i < 4; i++)
            System.arraycopy(tempArr[i],0,arr[i],0, 4);
        for(int i = 1; i <= 16; i++)
            fish[i] = new Fish(tempFish[i].num, tempFish[i].x, tempFish[i].y, tempFish[i].dir, tempFish[i].alive);
    }
    static void moveFish(){
        for(int i = 1; i < 17; i++){
            if(fish[i].alive == 0)
                continue;
            int cnt = 0;
            int dir = fish[i].dir;
            int nx = 0, ny = 0;
            while(cnt < 8){
                dir %= 8;
                fish[i].dir = dir;
                nx = fish[i].x + d[dir][0];
                ny = fish[i].y + d[dir][1];
                if(nx < 0 || ny < 0 || nx >= 4 || ny >= 4){
                    dir++;
                    cnt++;
                    continue;
                }
                if(arr[nx][ny] == -1) {
                    cnt++;
                    dir++;
                    continue;
                }
                if(arr[nx][ny] == 0){
                    arr[fish[i].x][fish[i].y] = 0;
                }else{
                    int changeFish = fish[arr[nx][ny]].num;
                    fish[changeFish].x = fish[i].x;
                    fish[changeFish].y = fish[i].y;
                    arr[fish[changeFish].x][fish[changeFish].y] = changeFish;
                }
                fish[i].x = nx;
                fish[i].y = ny;
                arr[nx][ny] = i;
                break;
            }
        }
    }
}
